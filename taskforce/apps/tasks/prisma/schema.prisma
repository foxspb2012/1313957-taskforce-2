// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id            Int        @id @default(autoincrement())
  title         String
  description   String
  category      Category   @relation(fields: [categoryId], references: [id])
  categoryId    Int
  price         Decimal?   @db.Decimal(8, 2)
  dueDate       DateTime?
  picture       String?
  address       String?
  status        Status     @default(New)
  authorId      String
  contractorId  String?
  tags          TagsOnTasks[]
  comments      Comment[]
  responses     Response[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("Tasks")
}

model Category {
  id    Int     @id @default(autoincrement())
  title String  @unique
  tasks Task[]

  @@map("Categories")
}

model Tag {
  id    Int     @id @default(autoincrement())
  title String  @unique
  tasks TagsOnTasks[]

  @@map("Tags")
}

model TagsOnTasks {
  task        Task     @relation(fields: [taskId], references: [id])
  taskId      Int
  tags        Tag      @relation(fields: [tagId], references: [id])
  tagId       Int
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([taskId, tagId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  text      String
  userId    String
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    Int
  createdAt DateTime  @default(now())

  @@map("Comments")
}

model Feedback {
  id        Int       @id @default(autoincrement())
  text      String?
  score     Decimal?  @db.Decimal(8, 2)
  userId    String
  taskId    Int
  createdAt DateTime  @default(now())

  @@map("Feedbacks")
}

model Response {
  id        Int       @id @default(autoincrement())
  text      String?
  price     Decimal?  @db.Decimal(8, 2)
  userId    String
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    Int
  createdAt DateTime  @default(now())

  @@map("Responses")
}

enum Status {
  New
  Rejected
  InProgress
  Completed
  Failed
}
